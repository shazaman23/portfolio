version: 2.1

jobs:
  build:
    docker:
      - image: cimg/php:8.0-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - php-dependencies-{{ checksum "composer.json" }}
            - php-dependencies-
      - run:
          name: composer install -n --prefer-dist
          command: |
            sed -ie "s|__APP_ENV__|$APP_ENV|g" .env.pipelines
            sed -ie "s|__APP_KEY__||g" .env.pipelines
            sed -ie "s|__APP_URL__|$APP_URL|g" .env.pipelines
            sed -ie "s|__DB_HOST__|$DB_HOST|g" .env.pipelines
            sed -ie "s|__DB_DATABASE__|$DB_DATABASE|g" .env.pipelines
            sed -ie "s|__DB_USERNAME__|$DB_USERNAME|g" .env.pipelines
            sed -ie "s|__DB_PASSWORD__|$DB_PASSWORD|g" .env.pipelines
            sed -ie "s|__MAIL_FROM_ADDRESS__|$MAIL_FROM_ADDRESS|g" .env.pipelines
            sed -ie "s|__MAILGUN_DOMAIN__|$MAILGUN_DOMAIN|g" .env.pipelines
            sed -ie "s|__MAILGUN_SECRET__|$MAILGUN_SECRET|g" .env.pipelines
            cp .env.pipelines .env
            composer install --no-interaction --p
      - save_cache:
          key: php-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-dependencies-{{ checksum "package.json" }}
            - node-dependencies-
      - run:
          name: npm install
          command: npm install
      - save_cache:
          key: node-dependencies-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - persist_to_workspace:
          root: ./
          paths:
            - ./
  
  phpunit:
    docker:
      - image: cimg/php:8.0-node
      - image: circleci/mysql:5.7.31
        environment:
          MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
          MYSQL_DATABASE: 'homestead'
          MYSQL_USER: $DB_USERNAME
          MYSQL_PASSWORD: $DB_PASSWORD
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: npm run prod
          command: npm run prod
      - run: # Primary container is not MySQL so we need to wait till it's running and ready
          name: Sleep for MySQL
          command: |
            for i in `seq 1 20`
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 5
            done
            echo "Timeout waiting for connection to MySQL" && exit 1
      - run:
          name: Initialize Database and Environment
          command: |
            php artisan key:generate
            php artisan migrate:fresh --seed
            php artisan config:cache
            php artisan serve &
            sleep 5
      - run:
          name: Run Tests
          command: |
            ./vendor/bin/phpunit --colors --testdox
      - store_artifacts:
          path: ./storage/logs
      - store_artifacts:
          path: ./tests/Browser/screenshots
      - store_artifacts:
          path: ./tests/phpunit/results.xml
      - store_test_results:
          path: ./tests

workflows:
  deploy:
    jobs:
      - build
      - phpunit:
          requires:
            - build