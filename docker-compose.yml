version: '3'
services:
    # PHP Service
    app:
        build:
            context: .
            dockerfile: docker-config/Dockerfile
        container_name: portfolio-app
        restart: unless-stopped
        tty: true
        working_dir: /var/www/portfolio
        environment:
            XDEBUG_HOST: host.docker.internal
        volumes:
            - ./:/var/www/portfolio
            - ./docker-config/php/local.ini:/usr/local/etc/php/conf.d/local.ini
            - ./docker-config/php/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini
            - ./docker-config/php/error_reporting.ini:/usr/local/etc/php/conf.d/error_reporting.ini
            - ./docker-config/php/fpm/pool.conf:/usr/local/etc/php-fpm.d/pool.conf
        networks:
            - portfolio-app-network

    # Nginx Service
    webserver:
        build:
            context: docker-config/nginx
            dockerfile: nginx.Dockerfile
        container_name: portfolio-webserver
        restart: unless-stopped
        tty: true
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./:/var/www/portfolio
            - ./docker-config/nginx/sites-enabled/:/etc/nginx/sites-enabled/
        networks:
            - portfolio-app-network

    # MySQL Service
    db:
        image: mysql:8.0
        container_name: portfolio-db
        restart: unless-stopped
        tty: true
        ports:
            - "3306:3306"
        environment:
            MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
            MYSQL_DATABASE: portfolio
            MYSQL_USER: sail
            MYSQL_PASSWORD: password
        volumes:
            - dbdata:/var/lib/mysql
            - ./docker-config/mysql/my.cnf:/etc/mysql/my.cnf
        networks:
            - portfolio-app-network

    # phpMyAdmin Service    
    phpmyadmin:
        depends_on:
            - db
        image: phpmyadmin/phpmyadmin
        container_name: portfolio-phpmyadmin
        restart: always
        ports:
            - '8080:80'
        environment:
            PMA_HOST: db
        networks:
            - portfolio-app-network

    mailhog:
        image: 'mailhog/mailhog:latest'
        ports:
            - "1025:1025"
            - "8025:8025"
        networks:
            - portfolio-app-network

# Docker Networks
networks:
    portfolio-app-network:
        driver: bridge

# Volumes
volumes:
    dbdata:
        driver: local
